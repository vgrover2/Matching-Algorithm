import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.*; 
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.table.TableColumnModel;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.ListModel;
import java.util.*;
import java.util.Collections;
import javax.swing.DefaultListModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author vedantgrover
 */
public class Matching extends javax.swing.JFrame {
    Connection con;
    

    /**
     * Creates new form Matching
     */
    public Matching() {
        con = Connect.ConnecrDB();
        initComponents();
        
    }
    
    ArrayList <StudentsPresent> StudentsPresentTopicOneList = new ArrayList();
    //arraylist full of instances of students present in the session as entered by Ms.Huntley
    //and their skill and passion levels on the first topic of the lesson
    ArrayList <StudentsPresent> StudentsPresentTopicTwoList = new ArrayList(); 
    //same arraylist except for second topic of the lession 
    ArrayList <ClientsPresent> ClientsPresentTopicOneList = new ArrayList(); 
    //same for clients on first topic
    ArrayList <ClientsPresent> ClientsPresentTopicTwoList = new ArrayList(); 
    //same for clients on second topic
    ArrayList <Pair> PairList = new ArrayList(); 
    //arraylist with all the matched up pairings that'll be used in the lesson 
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        StudentEnterButton = new javax.swing.JButton();
        ClientsLabel = new javax.swing.JLabel();
        BackToMenuButton = new javax.swing.JButton();
        MatchingjButton = new javax.swing.JButton();
        StudentsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ResultsTable = new javax.swing.JTable();
        ClientEnterButton = new javax.swing.JButton();
        TopicsLabel = new javax.swing.JLabel();
        TopicName2TextField = new javax.swing.JTextField();
        TopicName1TextField = new javax.swing.JTextField();
        ClientNameComboBox = new javax.swing.JComboBox<>();
        StudentNameComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        TopicList = new javax.swing.JList<>();
        TopicListLabel = new javax.swing.JLabel();
        PairingsLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TopicList1 = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel7.setText("3 Topics for the lesson:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        TitleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        TitleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Screen Shot 2018-04-05 at 6.17.28 PM.png"))); // NOI18N
        TitleLabel.setText("Matching table");

        StudentEnterButton.setBackground(new java.awt.Color(250, 250, 250));
        StudentEnterButton.setText("Enter!");
        StudentEnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentEnterButtonActionPerformed(evt);
            }
        });

        ClientsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        ClientsLabel.setText("Clients in the lesson:");

        BackToMenuButton.setBackground(new java.awt.Color(255, 255, 255));
        BackToMenuButton.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        BackToMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Screen Shot 2018-03-16 at 12.20.01 PM.png"))); // NOI18N
        BackToMenuButton.setText("To menu");
        BackToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackToMenuButtonActionPerformed(evt);
            }
        });

        MatchingjButton.setBackground(new java.awt.Color(255, 255, 255));
        MatchingjButton.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        MatchingjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Screen Shot 2018-03-18 at 12.11.44 PM.png"))); // NOI18N
        MatchingjButton.setText("Match!");
        MatchingjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MatchingjButtonActionPerformed(evt);
            }
        });

        StudentsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        StudentsLabel.setText("Students in the lesson:");

        ResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student(s)", "Client(s)", "Topic"
            }
        ));
        jScrollPane1.setViewportView(ResultsTable);

        ClientEnterButton.setBackground(new java.awt.Color(250, 250, 250));
        ClientEnterButton.setText("Enter!");
        ClientEnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientEnterButtonActionPerformed(evt);
            }
        });

        TopicsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        TopicsLabel.setText("2 Lesson Topics:");

        TopicName1TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TopicName1TextFieldKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TopicName1TextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TopicName1TextFieldKeyReleased(evt);
            }
        });

        ClientNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alice", "JY", "Min", "Kim", "Chipmunk", "Donnie", "Dittu", "Victoria", "Hyung Kim" }));

        StudentNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vedant", "Aditya", "Utsah", "Orm", "Kenza", "Kai", "Abhinn" }));

        TopicList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "﻿", "Basic Skills", "Spotlight", "Pages", "Typing", "Keynote", "Photo Booth", "iMovie", "Google Maps", "Photoshop", "Notes", "Eclipse", "Garage Band", "Yenka", "Netbeans", "Google drive", "Youtube", "Gmail", "Online games", "Excel", "Google Calendar", "Teamie", "Onenote", "iTunes", "Spotify", "Movie streaming", "App store", "Chrome webstore", "Skype", "Facebook", "Creately", "Terminal", "Sketchup", "Fusion", "Yenka", "VLC", "Quicktime player", "Time machine", "Dictionary", "Self control", "Logger pro", "Numbers", "Calculator", "Text edit", "System preferences", "SQLite", "Ti-nspire", "Draw.io", "Google search", "Twitter", "Instagram" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        TopicList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TopicListMouseClicked(evt);
            }
        });
        TopicList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TopicListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(TopicList);

        TopicListLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        TopicListLabel.setText("List of Topics:");

        PairingsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        PairingsLabel.setText("Pairings for the session:");

        TopicList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "﻿", "Basic Skills", "Spotlight", "Pages", "Typing", "Keynote", "Photo Booth", "iMovie", "Google Maps", "Photoshop", "Notes", "Eclipse", "Garage Band", "Yenka", "Netbeans", "Google drive", "Youtube", "Gmail", "Online games", "Excel", "Google Calendar", "Teamie", "Onenote", "iTunes", "Spotify", "Movie streaming", "App store", "Chrome webstore", "Skype", "Facebook", "Creately", "Terminal", "Sketchup", "Fusion", "Yenka", "VLC", "Quicktime player", "Time machine", "Dictionary", "Self control", "Logger pro", "Numbers", "Calculator", "Text edit", "System preferences", "SQLite", "Ti-nspire", "Draw.io", "Google search", "Twitter", "Instagram" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        TopicList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TopicList1MouseClicked(evt);
            }
        });
        TopicList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TopicList1KeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(TopicList1);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel5.setText("2.");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel10.setText("1.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BackToMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TopicName1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(13, 13, 13)
                                                .addComponent(TitleLabel))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(ClientsLabel)
                                                    .addComponent(ClientNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(TopicsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(TopicName2TextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(StudentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(StudentNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(TopicListLabel)
                                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(MatchingjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ClientEnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(StudentEnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PairingsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TitleLabel)
                            .addComponent(PairingsLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TopicsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TopicListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TopicName1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))
                                .addGap(87, 87, 87)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TopicName2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(26, 26, 26)
                        .addComponent(StudentsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(StudentEnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StudentNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(ClientsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ClientNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClientEnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jScrollPane1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MatchingjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BackToMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TopicList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TopicList1KeyReleased
        // TODO add your handling code here:
        TopicName2TextField.setText(TopicList1.getSelectedValue());
    }//GEN-LAST:event_TopicList1KeyReleased

    private void TopicList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopicList1MouseClicked
        // TODO add your handling code here:
        TopicName2TextField.setText(TopicList1.getSelectedValue());
    }//GEN-LAST:event_TopicList1MouseClicked

    private void TopicListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TopicListKeyReleased
        // TODO add your handling code here:
        TopicName1TextField.setText(TopicList.getSelectedValue());
    }//GEN-LAST:event_TopicListKeyReleased

    private void TopicListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopicListMouseClicked
        // TODO add your handling code here:
        TopicName1TextField.setText(TopicList.getSelectedValue());
    }//GEN-LAST:event_TopicListMouseClicked

    private void TopicName1TextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TopicName1TextFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_TopicName1TextFieldKeyReleased

    private void TopicName1TextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TopicName1TextFieldKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TopicName1TextFieldKeyPressed

    private void TopicName1TextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TopicName1TextFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_TopicName1TextFieldKeyTyped

    private void ClientEnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientEnterButtonActionPerformed
        try{
            String query1 = "SELECT Name, TopicName, NoOfPeopleToTeach, PassionLevel, LevelOnTopic "
                    + "FROM People join Link on People.Id = Link.Person_ID join Content on Link.TopicNo"
                    + " = Content.TopicNo where People.Name = ? AND Content.TopicName = ?";
            //Goes through the different tables, People then Link then Content by joining them on a certain column
            
            //This query bring all the different values that exist in the different tables depending on which client and topic
            PreparedStatement pst = con.prepareStatement(query1);
            pst.setString(1, (String) ClientNameComboBox.getSelectedItem());
            pst.setString(2, TopicName1TextField.getText());
            ResultSet rs = pst.executeQuery();
            //The values get stored in result set 
            if (rs.next()){
                ClientsPresent Client = new ClientsPresent();
                Client.setName(rs.getString("Name"));
                Client.setTopicName(rs.getString("TopicName"));
                Client.setNoOfPeopleToTeach(rs.getInt("NoOfPeopleToTeach"));
                Client.setPassionLevel(rs.getInt("PassionLevel"));
                Client.setLevelOnTopic(rs.getInt("LevelOnTopic"));
                ClientsPresentTopicOneList.add(Client);
                //The result set is then used to create an instance of a client with all the respective values brought back 
            }
            
            String query2 = "SELECT Name, TopicName, NoOfPeopleToTeach, PassionLevel, LevelOnTopic FROM People join Link on People.Id = Link.Person_ID join Content on Link.TopicNo = Content.TopicNo where People.Name = ? AND Content.TopicName = ?";
            PreparedStatement pst2 = con.prepareStatement(query2);
            pst2.setString(1, (String) ClientNameComboBox.getSelectedItem());
            pst2.setString(2, TopicName2TextField.getText());
            ResultSet rs2 = pst2.executeQuery();
            if (rs2.next()){
                ClientsPresent Client = new ClientsPresent();
                Client.setName(rs2.getString("Name"));
                Client.setTopicName(rs2.getString("TopicName"));
                Client.setNoOfPeopleToTeach(rs2.getInt("NoOfPeopleToTeach"));
                Client.setPassionLevel(rs2.getInt("PassionLevel"));
                Client.setLevelOnTopic(rs2.getInt("LevelOnTopic"));
                ClientsPresentTopicTwoList.add(Client);
                //pst2.close();
                //rs2.close();

            }
            /*else {
                JOptionPane.showMessageDialog(null, "Clients topic 2");
            }
            */
            pst.close();
            pst2.close();
            rs.close();
            rs2.close();
            con.commit();

        }

        catch(SQLException e) {
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }

        
    }//GEN-LAST:event_ClientEnterButtonActionPerformed

    private void MatchingjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MatchingjButtonActionPerformed
 
        for (int i = (StudentsPresentTopicOneList.size()-1); i >= 0; i-- ){
            //loops from top of arraylist down through the rest 
            for (int o = 1; o <= i; o++){
                //meanwhile this loops from bottom till point where outside loop is 
                if(StudentsPresentTopicOneList.get(o-1).getLevelOnTopic() < StudentsPresentTopicOneList.get(o).getLevelOnTopic()){
                    Collections.swap(StudentsPresentTopicOneList, o-1, o);
                    //swaps out so that students with highest skill level on the topic are at top, continues in descending order
                    
                }
            }
        }
        
        for (int i = (StudentsPresentTopicTwoList.size()-1); i >= 0; i--){
            for (int o = 1; o <= i; o++ ){
                if(StudentsPresentTopicTwoList.get(o-1).getLevelOnTopic() < StudentsPresentTopicTwoList.get(o).getLevelOnTopic()){
                    Collections.swap(StudentsPresentTopicTwoList, o-1, o);
                }
            }
        }
        
        for (int i = (ClientsPresentTopicOneList.size()-1); i >= 0; i--){
            //outside loop starts as top goes down
            for (int o = 1; o <= i; o++ ){
                //inside loops from bottom of arraylist till point where outside loop is 
                if(5 - ClientsPresentTopicOneList.get(o-1).getLevelOnTopic() + 1.2*ClientsPresentTopicOneList.get(o-1).getPassionLevel() 
                        //A lower skill level for a client would mean they are a higher priority to be taught and would require a more skilled
                        //student to teach them, which is why "5-" is used to give a lower number higher value 
                        < 5 - ClientsPresentTopicOneList.get(o).getLevelOnTopic() + 1.2*ClientsPresentTopicOneList.get(o).getPassionLevel()){
                        //Passion level multiplied by 1.2 to give that a higher weightage and importance when sorting, 1.2 is just high enough
                    Collections.swap(ClientsPresentTopicOneList, o-1, o);
              //Sorted so that at the top of the array list are clients with highest combination of most interest and least skill in the topic 
                }
            }
        }

        for (int i = (ClientsPresentTopicTwoList.size()-1); i >= 0; i--){
            for (int o = 1; o <= i; o++ ){
                if(5 - ClientsPresentTopicTwoList.get(o-1).getLevelOnTopic() + 1.2*ClientsPresentTopicTwoList.get(o-1).getPassionLevel() < 5 - ClientsPresentTopicTwoList.get(o).getLevelOnTopic() + 1.2*ClientsPresentTopicTwoList.get(o).getPassionLevel()){
                    Collections.swap(ClientsPresentTopicTwoList, o-1, o);
                }
            }
        }
        
        
        int initialSize = ClientsPresentTopicOneList.size();
        for (int i = 0; i < ClientsPresentTopicOneList.size(); i++){
            if (ClientsPresentTopicOneList.get(i).getPassionLevel() < 3){
                ClientsPresentTopicOneList.remove(i);
                i--;
        //loops through entire array and removes all clients who have passion 
        //level lower than 3 on the first topic 
            }
        }
        int sizeDifference = initialSize - ClientsPresentTopicOneList.size();
        //stores the number of clients who were removed under variable "sizedifference"
        if (sizeDifference > 0){
        //enters loop if there are clients with low enough passion level 
            for (int i = 0; i < sizeDifference; i++) {
                String removeName = StudentsPresentTopicTwoList.get(i).getName();
                for (int z = 0; z < StudentsPresentTopicOneList.size(); z++){
                    if (removeName.equals(StudentsPresentTopicOneList.get(z).getName())){
                        StudentsPresentTopicOneList.remove(z);
                    }
        //removes the same number of students from the student topic one arraylist in order
        //of how high their level is in topic 2, thus providing the best suitable student to teach
                }
            }
        }
        for (int i = 0; i < StudentsPresentTopicOneList.size(); i++){
            String removeName = StudentsPresentTopicOneList.get(i).getName();
            for (int z = 0; z < StudentsPresentTopicTwoList.size(); z++){
                if (removeName.equals(StudentsPresentTopicTwoList.get(z).getName())){
                    StudentsPresentTopicTwoList.remove(z);
                }
            }
        //removes all students not teaching topic two from the arraylist
        }
        for (int i = 0; i < ClientsPresentTopicOneList.size(); i++){
            String removeName = ClientsPresentTopicOneList.get(i).getName();
            for (int z = 0; z < ClientsPresentTopicTwoList.size(); z++){
                if (removeName.equals(ClientsPresentTopicTwoList.get(z).getName())){
                    ClientsPresentTopicTwoList.remove(z);
                }
            }
        //removes all clients not learning topic two from the arraylist
        }
        if (ClientsPresentTopicTwoList.size() > 0){
            for (int i = 0; i < ClientsPresentTopicTwoList.size(); i++){
                Pair topicTwoPair = new Pair();
                topicTwoPair.setClientName(ClientsPresentTopicTwoList.get(i).getName());
                topicTwoPair.setStudentName(StudentsPresentTopicTwoList.get(i).getName());
                topicTwoPair.setTopicName(StudentsPresentTopicTwoList.get(i).getTopicName());
                PairList.add(topicTwoPair);
        //creates the pairings for topic 2, adds to pair arraylist to later be shown in results table
            }
        }   
        
        if (StudentsPresentTopicOneList.size() == ClientsPresentTopicOneList.size()){
            //enters into next loop if equal number of students and clients are entered 
                for (int i = 0; i < StudentsPresentTopicOneList.size(); i++) {
                    Pair pair = new Pair();
                    pair.setClientName(ClientsPresentTopicOneList.get(i).getName());
                    pair.setStudentName(StudentsPresentTopicOneList.get(i).getName()); 
                    pair.setTopicName(StudentsPresentTopicOneList.get(i).getTopicName());
                    PairList.add(pair);
                    //New instances of pairs created, with top of each student and client 
                    //arraylist since that will be best student with highest priority client
                    //these go into the pair array list 
                }
                DefaultTableModel model = (DefaultTableModel) ResultsTable.getModel();
                ResultsTable.setRowHeight(85);
                Object rowData[] = new Object[3];
                for (int i = 0; i < PairList.size(); i++) {
                    rowData[0] = PairList.get(i).getStudentName();
                    rowData[1] = PairList.get(i).getClientName();
                    rowData[2] = PairList.get(i).getTopicName();
                    model.addRow(rowData);
                    //pairs then displayed on results table using the pair arraylist
                }
                
            }
        
        
        
        if (ClientsPresentTopicOneList.get(1).getNoOfPeopleToTeach() > 1){
            if (StudentsPresentTopicOneList.size() == 2*ClientsPresentTopicOneList.size()){
            //only enters this loop if there are double the amount of students as that would be
            //necessary to teach a topic that requires 2 studetns to teach 1 client 
                int j = 0; 
                for (int a = 0; a < StudentsPresentTopicOneList.size(); a+=2) {
            //loops in intervals of 2 to avoid repitition of a student  
                    Pair pair = new Pair();
                    pair.setClientName(ClientsPresentTopicOneList.get(j).getName());
                    pair.setStudentName(StudentsPresentTopicOneList.get(a).getName());
                    pair.setName2(StudentsPresentTopicOneList.get(a+1).getName());
                    pair.setTopicName(StudentsPresentTopicOneList.get(1).getTopicName());
                    j++;
                    PairList.add(pair);
            //alternate constructor called here again because requires an extra name in the instance of a pair
                    DefaultTableModel model = (DefaultTableModel) ResultsTable.getModel();
                    ResultsTable.setRowHeight(85);
                    Object rowData[] = new Object[3];
                    for (int o = 0; o < PairList.size(); o++){
                        rowData[0] = PairList.get(o).getStudentName() + ", " + PairList.get(o).getName2();
                        rowData[1] = PairList.get(o).getClientName();
                        rowData[2] = PairList.get(o).getTopicName();
                        model.addRow(rowData);
            //Pairs from arraylist then displayed on results table 
                    }
                    
                }
            }
            else {
                JOptionPane.showMessageDialog(null,"There aren't enough students to teach " + 
                        StudentsPresentTopicOneList.get(1).getTopicName() + "!" );
            }
        
        }
        
        if (ClientsPresentTopicOneList.size() > StudentsPresentTopicOneList.size()){
            //enters this loop when more clients than students 
            int difference = ClientsPresentTopicOneList.size() - StudentsPresentTopicOneList.size();
            //stores the number of extra clients in the variable "difference" 
            for (int i = 0; i < StudentsPresentTopicOneList.size() - difference; i++){
            //loops until the point where there are same number of students and clients 
                Pair pair = new Pair();
                pair.setClientName(ClientsPresentTopicOneList.get(i).getName());
                pair.setStudentName(StudentsPresentTopicOneList.get(i).getName());
                pair.setTopicName(StudentsPresentTopicOneList.get(i).getTopicName());
                PairList.add(pair);
            //even pairs are created, right now only the number of extra clients are without pairings, all added to the arraylist of pairs 
            }
            for (int e = StudentsPresentTopicOneList.size() - difference; e < StudentsPresentTopicOneList.size(); e++){
            //now loops through top section of students, it will loop through as many students as the value of "difference" is 
                Pair pair2 = new Pair();
                pair2.setClientName(ClientsPresentTopicOneList.get(e).getName());
                pair2.setStudentName(StudentsPresentTopicOneList.get(e).getName());
                pair2.setTopicName(StudentsPresentTopicOneList.get(e).getTopicName());
                pair2.setName2(ClientsPresentTopicOneList.get(StudentsPresentTopicOneList.size()+(StudentsPresentTopicOneList.size()-e-1)).getName());
                PairList.add(pair2);
            //all the extra clients are each added one by one to existing pairs consisting of the most capable students chronologically, calls alternate constructor
            }
            DefaultTableModel model = (DefaultTableModel) ResultsTable.getModel(); 
            ResultsTable.setRowHeight(85);
            Object rowData[] = new Object[3];
            for (int o = 0; o < PairList.size(); o++){
                if (PairList.get(o).getName2() == null){
                    rowData[0] = PairList.get(o).getStudentName();
                    rowData[1] = PairList.get(o).getClientName();
                    rowData[2] = PairList.get(o).getTopicName();
                    model.addRow(rowData);
                }
                else {
                    rowData[0] = PairList.get(o).getStudentName();
                    rowData[1] = PairList.get(o).getClientName() + ", " + PairList.get(o).getName2();
                    rowData[2] = PairList.get(o).getTopicName();
                    model.addRow(rowData);
                //all pairs from pair list are then added to the results table after being checked if it was an uneven or an even pair
                }
            }
            
        }
        
        if (StudentsPresentTopicOneList.size() > ClientsPresentTopicOneList.size() & StudentsPresentTopicOneList.get(1).getNoOfPeopleToTeach() == 1){
            int difference = StudentsPresentTopicOneList.size() - ClientsPresentTopicOneList.size();
            for (int i = 0; i < ClientsPresentTopicOneList.size() - difference; i++){
                Pair pair = new Pair();
                pair.setClientName(ClientsPresentTopicOneList.get(i).getName());
                pair.setStudentName(StudentsPresentTopicOneList.get(i).getName());
                pair.setTopicName(StudentsPresentTopicOneList.get(i).getTopicName());
                PairList.add(pair);
            }
            for (int e = ClientsPresentTopicOneList.size()-difference; e < ClientsPresentTopicOneList.size(); e++){
                Pair pair2 = new Pair();
                pair2.setClientName(ClientsPresentTopicOneList.get(e).getName());
                pair2.setStudentName(StudentsPresentTopicOneList.get(e).getName());
                pair2.setTopicName(ClientsPresentTopicOneList.get(e).getTopicName());
                pair2.setName2(StudentsPresentTopicOneList.get(ClientsPresentTopicOneList.size() + (ClientsPresentTopicOneList.size() - e - 1)).getName());
                PairList.add(pair2);
            }
            DefaultTableModel model = (DefaultTableModel) ResultsTable.getModel();
            ResultsTable.setRowHeight(85);
            Object rowData[] = new Object[3];
            for (int o = 0; o < PairList.size(); o++){
                if (PairList.get(o).getName2() == null){
                    rowData[0] = PairList.get(o).getStudentName();
                    rowData[1] = PairList.get(o).getClientName();
                    rowData[2] = PairList.get(o).getTopicName();
                    model.addRow(rowData);
                }
                else {
                    rowData[0] = PairList.get(o).getStudentName() + ", " + PairList.get(o).getName2();
                    rowData[1] = PairList.get(o).getClientName();
                    rowData[2] = PairList.get(o).getTopicName();
                    model.addRow(rowData);
                }       
            }
            
        }
        
        
        
        
    }//GEN-LAST:event_MatchingjButtonActionPerformed

    private void BackToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackToMenuButtonActionPerformed
        dispose();
        MainMenu mm = new MainMenu();
        mm.setVisible(true);
        //this.setVisible(false);
    }//GEN-LAST:event_BackToMenuButtonActionPerformed

    private void StudentEnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentEnterButtonActionPerformed
        // TODO add your handling code here:
        try{

            String query1 = "SELECT Name, TopicName, NoOfPeopleToTeach, PassionLevel, LevelOnTopic FROM People join Link on People.Id = Link.Person_ID join Content on Link.TopicNo = Content.TopicNo where People.Name = ? AND Content.TopicName = ?";
            PreparedStatement pst = con.prepareStatement(query1);
            pst.setString(1, (String) StudentNameComboBox.getSelectedItem());
            pst.setString(2, TopicName1TextField.getText());
            ResultSet rs = pst.executeQuery();
            if (rs.next()){
                StudentsPresent Student = new StudentsPresent();
                Student.setName(rs.getString("Name"));
                Student.setTopicName(rs.getString("TopicName"));
                Student.setNoOfPeopleToTeach(rs.getInt("NoOfPeopleToTeach"));
                Student.setPassionLevel(rs.getInt("PassionLevel"));
                Student.setLevelOnTopic(rs.getInt("LevelOnTopic"));
                StudentsPresentTopicOneList.add(Student);
                //pst.close();
                //rs.close();
            }
            /*
            else{
                JOptionPane.showMessageDialog(null, "Students Topic 1!" );
            }
            */

            String query2 = "SELECT Name, TopicName, NoOfPeopleToTeach, PassionLevel, LevelOnTopic FROM People join Link on People.Id = Link.Person_ID join Content on Link.TopicNo = Content.TopicNo where People.Name = ? AND Content.TopicName = ?";
            PreparedStatement pst2 = con.prepareStatement(query2);
            pst2.setString(1, (String) StudentNameComboBox.getSelectedItem());
            pst2.setString(2, TopicName2TextField.getText());
            ResultSet rs2 = pst2.executeQuery();
            if (rs2.next()){
                StudentsPresent Student = new StudentsPresent();
                Student.setName(rs2.getString("Name"));
                Student.setTopicName(rs2.getString("TopicName"));
                Student.setNoOfPeopleToTeach(rs.getInt("NoOfPeopleToTeach"));
                Student.setPassionLevel(rs2.getInt("PassionLevel"));
                Student.setLevelOnTopic(rs2.getInt("LevelOnTopic"));
                StudentsPresentTopicTwoList.add(Student);
                //pst2.close();
                //rs2.close();
            }
            /*
            else {
                JOptionPane.showMessageDialog(null, "Students Topic 2");
            }
            */
            pst.close();
            pst2.close();
            rs.close();
            rs2.close();
            con.commit();
        }
        catch(SQLException e) {
            JOptionPane.showMessageDialog(null, e);
            e.printStackTrace();

        }

    }//GEN-LAST:event_StudentEnterButtonActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Matching.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Matching.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Matching.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Matching.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Matching().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackToMenuButton;
    private javax.swing.JButton ClientEnterButton;
    private javax.swing.JComboBox<String> ClientNameComboBox;
    private javax.swing.JLabel ClientsLabel;
    private javax.swing.JButton MatchingjButton;
    private javax.swing.JLabel PairingsLabel;
    private javax.swing.JTable ResultsTable;
    private javax.swing.JButton StudentEnterButton;
    private javax.swing.JComboBox<String> StudentNameComboBox;
    private javax.swing.JLabel StudentsLabel;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JList<String> TopicList;
    private javax.swing.JList<String> TopicList1;
    private javax.swing.JLabel TopicListLabel;
    private javax.swing.JTextField TopicName1TextField;
    private javax.swing.JTextField TopicName2TextField;
    private javax.swing.JLabel TopicsLabel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
